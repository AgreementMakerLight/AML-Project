/******************************************************************************
* Copyright 2013-2016 LASIGE                                                  *
*                                                                             *
* Licensed under the Apache License, Version 2.0 (the "License"); you may     *
* not use this file except in compliance with the License. You may obtain a   *
* copy of the License at http://www.apache.org/licenses/LICENSE-2.0           *
*                                                                             *
* Unless required by applicable law or agreed to in writing, software         *
* distributed under the License is distributed on an "AS IS" BASIS,           *
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
* See the License for the specific language governing permissions and         *
* limitations under the License.                                              *
*                                                                             *
*******************************************************************************
* Matches Ontologies by finding literal full-name matches between their       *
* Lexicons and the Lexicon of a third mediating Ontology, by employing the    *
* LexicalMatcher. Extends Lexicons with synonyms from the mediating ontology. *
*                                                                             *
* @author Daniel Faria                                                        *
******************************************************************************/
package aml.match;

import java.io.File;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import aml.AML;
import aml.knowledge.MediatorLexicon;
import aml.knowledge.MediatorOntology;
import aml.ontology.Lexicon;
import aml.settings.EntityType;
import aml.settings.LexicalType;
import aml.util.MapSorter;
import aml.util.Table2Map;

public class MediatingMatcher implements LexiconExtender, PrimaryMatcher
{

//Attributes

	//The external ontology used as a mediator
	private MediatorLexicon ext;
	private String uri;
	//The type of lexical entry generated by this Lexicon extender
	private final LexicalType TYPE = LexicalType.EXTERNAL_MATCH;
	
//Constructors

	/**
	 * Constructs a MediatingMatcher with the given external Ontology
	 * @param x: the external Ontology
	 */
	public MediatingMatcher(MediatorOntology x)
	{
		ext = x.getMediatorLexicon();
		uri = x.getURI();
	}
	
	/**
	 * Constructs a MediatingMatcher with the given external Lexicon file
	 * @param file: the file with the external Lexicon
	 */
	public MediatingMatcher(String file)
	{
		try
		{
			ext = new MediatorLexicon(file);
		}
		catch(Exception e)
		{
			System.out.println("Unable to build lexicon: " + file);
			e.printStackTrace();
			ext = new MediatorLexicon();
		}
		uri = (new File(file)).getName();
	}

//Public Methods
	
	@Override
	public void extendLexicons(EntityType e, double thresh)
	{
		//MediatingMatcher supports classes only
		if(!e.equals(EntityType.CLASS))
		{
			System.out.println("Mediating Matcher supports class matching only");
			return;
		}
		System.out.println("Extending Lexicons with Mediating Matcher using " + uri);
		long time = System.currentTimeMillis()/1000;
		AML aml = AML.getInstance();
		Lexicon source = aml.getSource().getLexicon();
		Table2Map<Integer,Integer,Double> maps = match(source,thresh,false);
		for(Integer s : maps.keySet())
		{
			int hit;
			//If there are multiple mappings, choose the best
			if(maps.entryCount(s) > 1)
			{
				Map<Integer,Double> results = MapSorter.sortDescending(maps.get(s));
				Iterator<Integer> i = results.keySet().iterator();
				hit = i.next();
				int secondHit = i.next();
				//If there is a tie, then skip to next class
				if(maps.get(s,hit) == maps.get(s,secondHit))
					continue;
			}
			else
				hit = maps.keySet(s).iterator().next();
			Set<String> names = ext.getNames(hit);
			for(String n : names)
			{
				double sim = maps.get(s,hit) * ext.getWeight(n, hit);
				if(sim >= thresh)
					source.add(s, n, "en", TYPE, uri, sim);
			}
		}
		Lexicon target = aml.getTarget().getLexicon();
		maps = match(target,thresh,false);
		for(Integer s : maps.keySet())
		{
			int hit;
			//If there are multiple mappings, choose the best
			if(maps.entryCount(s) > 1)
			{
				Map<Integer,Double> results = MapSorter.sortDescending(maps.get(s));
				Iterator<Integer> i = results.keySet().iterator();
				hit = i.next();
				int secondHit = i.next();
				//If there is a tie, then skip to next class
				if(maps.get(s,hit) == maps.get(s,secondHit))
					continue;
			}
			else
				hit = maps.keySet(s).iterator().next();
			Set<String> names = ext.getNames(hit);
			for(String n : names)
			{
				double sim = maps.get(s,hit) * ext.getWeight(n, hit);
				if(sim >= thresh)
					target.add(s, n, "en", TYPE, uri, sim);
			}
		}
		time = System.currentTimeMillis()/1000 - time;
		System.out.println("Finished in " + time + " seconds");
	}
	
	@Override
	public Alignment match(EntityType e, double thresh)
	{
		//MediatingMatcher supports classes only
		if(!e.equals(EntityType.CLASS))
		{
			System.out.println("Mediating Matcher supports class matching only");
			return new Alignment();
		}
		System.out.println("Running Mediating Matcher using " + uri);
		long time = System.currentTimeMillis()/1000;
		AML aml = AML.getInstance();
		Lexicon source = aml.getSource().getLexicon();
		Lexicon target = aml.getTarget().getLexicon();
		Table2Map<Integer,Integer,Double> src = match(source,thresh,false);
		Table2Map<Integer,Integer,Double> tgt = match(target,thresh,true);
		Alignment maps = new Alignment();
		for(Integer s : src.keySet())
		{
			for(Integer med : src.keySet(s))
			{
				if(!tgt.contains(med))
					continue;
				for(Integer t : tgt.keySet(med))
				{
					double similarity = Math.min(src.get(s, med), tgt.get(med, t));
					maps.add(s,t,similarity);
				}
			}
		}
		time = System.currentTimeMillis()/1000 - time;
		System.out.println("Finished in " + time + " seconds");
		return maps;
	}
	
//Private Methods
	
	private Table2Map<Integer,Integer,Double> match(Lexicon source, double thresh, boolean reverse)
	{
		Table2Map<Integer,Integer,Double> maps = new Table2Map<Integer,Integer,Double>();
		for(String s : source.getNames(EntityType.CLASS))
		{
			Set<Integer> sourceIndexes = source.getEntities(EntityType.CLASS,s);
			Set<Integer> targetIndexes = ext.getEntities(s);
			//If the name doesn't exist in either ontology, skip it
			if(sourceIndexes == null || targetIndexes == null)
				continue;
			//Otherwise, match all indexes
			for(Integer i : sourceIndexes)
			{
				double weight = source.getCorrectedWeight(s, i);
				for(Integer j : targetIndexes)
				{
					//Get the weight of the name for the term in the larger lexicon
					double similarity = ext.getCorrectedWeight(s, j);
					//Then compute the similarity, by multiplying the two weights
					similarity *= weight;
					//If the similarity is above threshold
					if(similarity >= thresh)
					{
						if(reverse)
							maps.add(j, i, similarity);
						else
							maps.add(i, j, similarity);
					}
				}
			}
		}
		return maps;
	}
}