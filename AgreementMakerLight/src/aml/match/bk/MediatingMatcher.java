/******************************************************************************
* Copyright 2013-2018 LASIGE                                                  *
*                                                                             *
* Licensed under the Apache License, Version 2.0 (the "License"); you may     *
* not use this file except in compliance with the License. You may obtain a   *
* copy of the License at http://www.apache.org/licenses/LICENSE-2.0           *
*                                                                             *
* Unless required by applicable law or agreed to in writing, software         *
* distributed under the License is distributed on an "AS IS" BASIS,           *
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
* See the License for the specific language governing permissions and         *
* limitations under the License.                                              *
*                                                                             *
*******************************************************************************
* Matches Ontologies by finding literal full-name matches between their       *
* Lexicons and the Lexicon of a third mediating Ontology, by employing the    *
* LexicalMatcher. Extends Lexicons with synonyms from the mediating ontology. *
*                                                                             *
* @author Daniel Faria                                                        *
******************************************************************************/
package aml.match.bk;

import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import aml.alignment.SimpleAlignment;
import aml.match.AbstractHashMatcher;
import aml.ontology.MediatorOntology;
import aml.ontology.Ontology;
import aml.ontology.EntityType;
import aml.ontology.lexicon.LexicalType;
import aml.ontology.lexicon.Lexicon;
import aml.ontology.lexicon.LexiconExtender;
import aml.ontology.lexicon.ExternalLexicon;
import aml.util.data.Map2MapComparable;
import aml.util.data.MapSorter;

public class MediatingMatcher extends AbstractHashMatcher implements LexiconExtender
{

//Attributes

	protected String description = "Matches entities that have one or more exact\n" +
			  								  "String matches between their Lexicon entries\n" +
			  								  "and a common Lexicon entry of a background\n" +
			  								  "knowledge source.";
	protected String name = "Mediating Matcher";
	protected EntityType[] support = {EntityType.CLASS};
	//The MediatorLexicon used by this matcher
	protected ExternalLexicon ext;
	protected String uri;
	//The type of lexical entry generated by this Lexicon extender
	protected static final LexicalType TYPE = LexicalType.EXTERNAL_MATCH;
	
//Constructors

	/**
	 * Constructs a MediatingMatcher with the given external Ontology
	 * @param x: the external Ontology
	 */
	public MediatingMatcher(MediatorOntology x)
	{
		ext = x.getExternalLexicon();
		uri = x.getURI();
	}
	
	/**
	 * Constructs a MediatingMatcher with the given MediatorLexicon
	 * @param x: the MediatorLexicon
	 * @param u: the URI of the MediatorLexicon
	 */
	public MediatingMatcher(ExternalLexicon x, String u)
	{
		ext = x;
		uri = u;
	}

//Public Methods
	
	@Override
	public void extendLexicon(Ontology o)
	{
		System.out.println("Extending Lexicon with " + NAME + " using " + uri);
		long time = System.currentTimeMillis()/1000;
		Lexicon l = o.getLexicon();
		Map2MapComparable<String,String,Double> maps = match(l,0.0);
		for(String s : maps.keySet())
		{
			String hit;
			//If there are multiple mappings, choose the best
			if(maps.entryCount(s) > 1)
			{
				Map<String,Double> results = MapSorter.sortDescending(maps.get(s));
				Iterator<String> i = results.keySet().iterator();
				hit = i.next();
				String secondHit = i.next();
				//If there is a tie, then skip to next class
				if(maps.get(s,hit) == maps.get(s,secondHit))
					continue;
			}
			else
				hit = maps.keySet(s).iterator().next();
			Set<String> names = ext.getNames(hit);
			for(String n : names)
			{
				double sim = maps.get(s,hit);
				l.add(s, n, "en", TYPE, uri, sim);
			}
		}
		time = System.currentTimeMillis()/1000 - time;
		System.out.println("Finished in " + time + " seconds");
	}

//Protected Methods
	
	@Override
	protected SimpleAlignment hashMatch(Ontology o1, Ontology o2, EntityType e, double thresh)
	{
		SimpleAlignment maps = new SimpleAlignment(o1,o2);
		System.out.println("Using: " + uri);
		Lexicon source = o1.getLexicon();
		Lexicon target = o2.getLexicon();
		Map2MapComparable<String,String,Double> src = match(source,thresh);
		Map2MapComparable<String,String,Double> tgt = match(target,thresh);
		//Reverse the target alignment table
		Map2MapComparable<String,String,Double> rev = new Map2MapComparable<String,String,Double>();
		for(String s : tgt.keySet())
			for(String t : tgt.keySet(s))
				rev.add(t, s, tgt.get(s, t));
		
		for(String s : src.keySet())
		{
			for(String med : src.keySet(s))
			{
				if(!rev.contains(med))
					continue;
				for(String t : rev.keySet(med))
				{
					double similarity = Math.min(src.get(s, med), rev.get(med, t));
					maps.add(s,t,similarity);
				}
			}
		}
		return maps;
	}
	
	protected Map2MapComparable<String,String,Double> match(Lexicon source, double thresh)
	{
		Map2MapComparable<String,String,Double> maps = new Map2MapComparable<String,String,Double>();
		for(String s : source.getNames(EntityType.CLASS))
		{
			Set<String> sourceIndexes = source.getEntities(EntityType.CLASS,s);
			Set<String> targetIndexes = ext.getEntities(s);
			//If the name doesn't exist in either ontology, skip it
			if(sourceIndexes == null || targetIndexes == null)
				continue;
			//count += sourceIndexes.size()*targetIndexes.size();
			//Otherwise, match all indexes
			for(String i : sourceIndexes)
			{
				double weight = source.getCorrectedWeight(s, i);
				for(String j : targetIndexes)
				{
					//Get the weight of the name for the term in the larger lexicon
					double similarity = ext.getWeight(s, j);
					//Then compute the similarity, by multiplying the two weights
					similarity *= weight;
					//If the similarity is above threshold
					if(similarity >= thresh && (!maps.contains(i, j) || similarity > maps.get(i, j)))
						maps.add(i, j, similarity);
				}
			}
		}
		return maps;
	}
}