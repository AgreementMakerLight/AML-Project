/******************************************************************************
* Copyright 2013-2014 LASIGE                                                  *
*                                                                             *
* Licensed under the Apache License, Version 2.0 (the "License"); you may     *
* not use this file except in compliance with the License. You may obtain a   *
* copy of the License at http://www.apache.org/licenses/LICENSE-2.0           *
*                                                                             *
* Unless required by applicable law or agreed to in writing, software         *
* distributed under the License is distributed on an "AS IS" BASIS,           *
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
* See the License for the specific language governing permissions and         *
* limitations under the License.                                              *
*                                                                             *
*******************************************************************************
* Matches Ontologies by using cross-references between them and a third       *
* mediating Ontology, or using Lexical matches when there are few or no       *
* cross-references.                                                           *
*                                                                             *
* @author Daniel Faria                                                        *
* @date 31-07-2014                                                            *
* @version 2.0                                                                *
******************************************************************************/
package aml.match;

import java.util.Set;
import java.util.Vector;

import aml.AML;
import aml.ontology.Lexicon;
import aml.ontology.Ontology;
import aml.ontology.ReferenceMap;

public class XRefMatcher implements PrimaryMatcher, LexiconExtender
{
	
//Attributes

	//The external ontology
	private Ontology ext;
	private String uri;
	//The type of lexical entry generated by this Lexicon extender
	private final String TYPE = "externalMatch";
	//The source and target alignments
	private Alignment src, tgt;
	
//Constructors

	/**
	 * Constructs a XRefMatcher with the given external Ontology
	 * @param x: the external Ontology
	 */
	public XRefMatcher(Ontology x)
	{
		ext = x;
		uri = x.getURI();
	}

//Public Methods

	@Override
	public void extendLexicons(double thresh)
	{
		AML aml = AML.getInstance();
		Lexicon x = ext.getLexicon();
		Ontology o = aml.getSource();
		Lexicon lex = o.getLexicon();
		if(src == null)
			src = match(o,thresh);
		for(Mapping m : src)
		{
			if(m.getSimilarity() < thresh)
				continue;
			int t = m.getTargetId();
			Set<String> names = x.getNames(t);
			for(String n : names)
			{
				double sim = m.getSimilarity() * x.getWeight(n, t);
				if(sim >= thresh)
					lex.add(m.getSourceId(), n, TYPE, uri, sim);
			}
		}
		o = aml.getTarget();
		lex = o.getLexicon();
		if(tgt == null)
			tgt = match(o,thresh);
		for(Mapping m : tgt)
		{
			if(m.getSimilarity() < thresh)
				continue;
			int t = m.getTargetId();
			Set<String> names = x.getNames(t);
			for(String n : names)
			{
				double sim = m.getSimilarity() * x.getWeight(n, t);
				if(sim >= thresh)
					lex.add(m.getSourceId(), n, TYPE, uri, sim);
			}
		}
	}
	
	@Override
	public Alignment match(double thresh)
	{
		AML aml = AML.getInstance();
		Ontology source = aml.getSource();
		Ontology target = aml.getTarget();
		src = match(source,thresh);
		tgt = match(target,thresh);
		Alignment maps = new Alignment();
		for(Mapping m : src)
		{
			int sourceId = m.getSourceId();
			int medId = m.getTargetId();
			Set<Integer> matches = tgt.getTargetMappings(medId);
			for(Integer j : matches)
			{
				double similarity = Math.min(m.getSimilarity(),
						tgt.getSimilarity(j, medId));
				maps.add(new Mapping(sourceId,j,similarity));
			}
		}
		return maps;
	}
	
//Private Methods
	
	private Alignment match(Ontology o, double thresh)
	{
		Alignment a = new Alignment();
		ReferenceMap rm = ext.getReferenceMap();
		if(rm != null)
		{
			Set<String> refs = rm.getReferences();
			Set<String> names = o.getLocalNames();
			for(String r : refs)
			{
				if(names.contains(r))
				{
					Vector<Integer> terms = rm.get(r);
					//Penalize cases where multiple terms have the same xref
					//(note that sim = 1 when the xref is unique) 
					double sim = 1.3 - (terms.size() * 0.3);
					if(sim < thresh)
						continue;
					for(Integer i : terms)
						a.add(o.getIndex(r), i, sim);
				}
			}
		}
		//Step 2 - Do a lexical match
		LexicalMatcher lm = new LexicalMatcher();
		Alignment b = lm.match(o.getLexicon(),ext.getLexicon(),thresh);
		
		//Step 3 - Compare the two
		//If the coverage of the lexical match is at least double
		//the coverage of the xref match (such as when there are
		//few or no xrefs) merge the two
		if(b.sourceCount() > a.sourceCount() * 2)
			a.addAll(b);
		//Otherwise, the xref match is the preferred choice
		return a;
	}
}