/******************************************************************************
* Copyright 2013-2014 LASIGE                                                  *
*                                                                             *
* Licensed under the Apache License, Version 2.0 (the "License"); you may     *
* not use this file except in compliance with the License. You may obtain a   *
* copy of the License at http://www.apache.org/licenses/LICENSE-2.0           *
*                                                                             *
* Unless required by applicable law or agreed to in writing, software         *
* distributed under the License is distributed on an "AS IS" BASIS,           *
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
* See the License for the specific language governing permissions and         *
* limitations under the License.                                              *
*                                                                             *
*******************************************************************************
* A Lexicon extender that gets synonyms from the WordNet.                     *
*                                                                             *
* @author Daniel Faria                                                        *
* @date 22-10-2013                                                            *
******************************************************************************/
package aml.ext;

import java.io.File;
import java.util.HashSet;
import java.util.Set;
import java.util.Vector;

import aml.ontology.Lexicon;
import aml.ontology.Ontology;
import aml.util.StringParser;


import edu.smu.tspell.wordnet.Synset;
import edu.smu.tspell.wordnet.WordNetDatabase;

public class WordNetExtender
{
	
//Attributes
	
	//The WordNet Interface
	private WordNetDatabase WordNet;
	//The path to the WordNet database
	private final String PATH = "store/knowledge/wordnet/";
	//The type of lexical entry generated by this LexiconExtender
	private final String TYPE = "externalMatch";
	//The source of this LexiconExtender
	private final String SOURCE = "WordNet";
	//The confidence score of WordNet
	private final double CONFIDENCE = 0.9;
	//The minimum weight (synonyms below this weight will not be added)
	private final double MIN_WEIGHT = 0.4;
	
//Constructors

	/**
	 * Constructs a new WordNetExtender
	 */
	public WordNetExtender()
	{
		//Setup the wordnet database directory
		String path = new File(PATH).getAbsolutePath();
		System.setProperty("wordnet.database.dir", path);
		//Instantiate WordNet
		WordNet = WordNetDatabase.getFileInstance();
	}

//Public Methods

	public void extendLexicon(Ontology o)
	{
		Lexicon l = o.getLexicon();
		//Get the original Lexicon names into a Vector since the
		//Lexicon will be extended during the iteration (otherwise
		//we'd get a concurrentModificationException)
		Vector<String> names = new Vector<String>(l.getNames());
		//Iterate through the original Lexicon names
		for(String s : names)
		{
			//We don't match formulas to WordNet
			if(StringParser.isFormula(s))
				continue;
			//Find all wordForms in WordNet for each name
			HashSet<String> wordForms = getAllWordForms(s);
			int size = wordForms.size();
			if(size == 0)
				continue;
			double conf = CONFIDENCE - 0.01*size;
			if(conf < MIN_WEIGHT)
				continue;
			Set<Integer> terms = l.getInternalTerms(s);
			//Add each term with the name to the extension Lexicon
			for(Integer i : terms)
			{
				double weight = conf * l.getWeight(s, i);
				if(weight < MIN_WEIGHT)
					continue;
				for(String w : wordForms)
					l.add(i, w, TYPE, SOURCE, weight);
			}
		}
	}

//Private Methods

	/**
	 * @param s: the String to search in WordNet
	 * @return the set of word forms for the given String
	 */
	private HashSet<String> getAllWordForms(String s)
	{
		HashSet<String> wordForms = new HashSet<String>();

		//Look for the name on WordNet
		Synset[] synsets = WordNet.getSynsets(s);
		//For each Synset found
		for(Synset ss : synsets)
		{
			//Get the WordForms
			String[] words = ss.getWordForms();
			//And add each one to the Lexicon
			for(String w : words)
				if(!w.trim().equals(""))
					wordForms.add(w);
		}
		return wordForms;
	}
}